# -*- coding: utf-8 -*-

# Auto-generated by sql2pyapi from comment_formats.sql

from typing import List, Optional, Tuple, Dict, Any
from psycopg import AsyncConnection

async def function_with_multiline_dash_comment(conn: AsyncConnection) -> Optional[int]:
    """This is a multi-line comment
    describing the first function.
    It has three lines.
    """
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM function_with_multiline_dash_comment()", [])
        row = await cur.fetchone()
        if row is None:
            return None
        if isinstance(row, dict):
            # Assumes the key is the function name for dict rows
            return row['function_with_multiline_dash_comment']
        else:
            # Fallback for tuple-like rows (index 0)
            return row[0]

async def function_with_single_block_comment(conn: AsyncConnection) -> Optional[str]:
    """This is a single-line block comment."""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM function_with_single_block_comment()", [])
        row = await cur.fetchone()
        if row is None:
            return None
        if isinstance(row, dict):
            # Assumes the key is the function name for dict rows
            return row['function_with_single_block_comment']
        else:
            # Fallback for tuple-like rows (index 0)
            return row[0]

async def function_with_multi_block_comment(conn: AsyncConnection) -> Optional[bool]:
    """This is a multi-line block comment.
    It uses asterisks for alignment.
      And has some indentation.
    """
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM function_with_multi_block_comment()", [])
        row = await cur.fetchone()
        if row is None:
            return None
        if isinstance(row, dict):
            # Assumes the key is the function name for dict rows
            return row['function_with_multi_block_comment']
        else:
            # Fallback for tuple-like rows (index 0)
            return row[0]

async def function_with_no_comment(conn: AsyncConnection) -> None:
    """Call PostgreSQL function function_with_no_comment()."""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM function_with_no_comment()", [])
        return None

async def function_with_separated_comment(conn: AsyncConnection) -> Optional[int]:
    """This comment is separated by a blank line"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM function_with_separated_comment()", [])
        row = await cur.fetchone()
        if row is None:
            return None
        if isinstance(row, dict):
            # Assumes the key is the function name for dict rows
            return row['function_with_separated_comment']
        else:
            # Fallback for tuple-like rows (index 0)
            return row[0]
