# Generated by sql2pyapi from scalar_function.sql
# DO NOT EDIT MANUALLY
from psycopg import AsyncConnection
from typing import Optional

async def get_item_count(conn: AsyncConnection) -> Optional[int]:
    """Returns a simple count"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM get_item_count()", [])
        row = await cur.fetchone()
        if row is None:
            return None
        if isinstance(row, dict):
            # Assumes the key is the function name for dict rows
            return row['get_item_count']
        else:
            # Fallback for tuple-like rows (index 0)
            return row[0]

async def get_item_name(conn: AsyncConnection, id: int) -> Optional[str]:
    """Returns text, potentially null"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM get_item_name(%s)", [id])
        row = await cur.fetchone()
        if row is None:
            return None
        if isinstance(row, dict):
            # Assumes the key is the function name for dict rows
            return row['get_item_name']
        else:
            # Fallback for tuple-like rows (index 0)
            return row[0]
