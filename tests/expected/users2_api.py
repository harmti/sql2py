# Generated by sql-to-python-api from users2.sql
# DO NOT EDIT MANUALLY
from dataclasses import dataclass
from datetime import datetime, date
from psycopg import AsyncConnection
from typing import Any, List, Optional
from uuid import UUID


@dataclass
class CreateUser:
    id: Any


@dataclass
class User:
    id: UUID
    clerk_id: str
    email: str
    email_verified: bool
    first_name: str
    last_name: str
    last_sign_in_at: datetime
    created_at: datetime
    updated_at: datetime
    is_deleted: bool




async def create_user(conn: AsyncConnection, clerk_id: str, email: Optional[str] = None, email_verified: Optional[bool] = None, first_name: Optional[str] = None, last_name: Optional[str] = None) -> Optional[CreateUser]:
    """Function to create a new user or return existing if clerk_id matches"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM create_user(%s, %s, %s, %s, %s)", [clerk_id, email, email_verified, first_name, last_name])
        row = await cur.fetchone()
        if row is None:
            return None
        # Ensure dataclass 'CreateUser' is defined above.
        return CreateUser(*row)



async def get_user_by_clerk_id(conn: AsyncConnection, clerk_id: str) -> List[User]:
    """Function to get a user by their clerk_id"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM get_user_by_clerk_id(%s)", [clerk_id])
        rows = await cur.fetchall()
        # Ensure dataclass 'User' is defined above.
        return [User(*row) for row in rows] if rows else []



async def get_user_by_id(conn: AsyncConnection, id: UUID) -> List[User]:
    """Function to get a user by their internal id"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM get_user_by_id(%s)", [id])
        rows = await cur.fetchall()
        # Ensure dataclass 'User' is defined above.
        return [User(*row) for row in rows] if rows else []



async def get_users(conn: AsyncConnection) -> List[User]:
    """Function to get all non-deleted users"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM get_users()", [])
        rows = await cur.fetchall()
        # Ensure dataclass 'User' is defined above.
        return [User(*row) for row in rows] if rows else []



async def update_user(conn: AsyncConnection, id: UUID, email: Optional[str] = None, email_verified: Optional[bool] = None, first_name: Optional[str] = None, last_name: Optional[str] = None, last_sign_in_at: Optional[datetime] = None) -> List[User]:
    """Function to update user details"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM update_user(%s, %s, %s, %s, %s, %s)", [id, email, email_verified, first_name, last_name, last_sign_in_at])
        rows = await cur.fetchall()
        # Ensure dataclass 'User' is defined above.
        return [User(*row) for row in rows] if rows else []



async def delete_user(conn: AsyncConnection, id: UUID) -> Optional[UUID]:
    """Function to mark a user as deleted"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM delete_user(%s)", [id])
        row = await cur.fetchone()
        if row is None:
            return None
        # Return first element for scalar
        return row[0]
