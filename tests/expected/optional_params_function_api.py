# -*- coding: utf-8 -*-

# Auto-generated by sql2pyapi from optional_params_function.sql

from typing import List, Optional, Tuple, Dict, Any
from psycopg import AsyncConnection
from dataclasses import dataclass

# TODO: Define dataclass for table 'items'
# @dataclass
# class Item:
#     pass

async def search_items(conn: AsyncConnection, query: str, limit: Optional[int] = None, include_unavailable: Optional[bool] = None) -> List[Item]:
    """Search for items with optional filters"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM search_items(%s, %s, %s)", [query, limit, include_unavailable])
        rows = await cur.fetchall()
        # Ensure dataclass 'Item' is defined above.
        if not rows:
            return []
        colnames = [desc[0] for desc in cur.description]
        processed_rows = [
            dict(zip(colnames, r)) if not isinstance(r, dict) else r
            for r in rows
        ]
        return [Item(**row_dict) for row_dict in processed_rows]
