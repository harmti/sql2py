# -*- coding: utf-8 -*-
# Auto-generated by sql2pyapi from optional_params_function.sql
#
# IMPORTANT: This code expects the database connection to use the default
# psycopg tuple row factory. It will raise errors if used with
# dictionary-based row factories (like DictRow).

from typing import List, Optional, Tuple, Dict, Any
from psycopg import AsyncConnection
from dataclasses import dataclass


# TODO: Define dataclass for table 'items'
# @dataclass
# class Item:
#     pass


async def search_items(conn: AsyncConnection, query: str, limit: Optional[int] = None, include_unavailable: Optional[bool] = None) -> List[Item]:
    """Search for items with optional filters"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM search_items(%s, %s, %s)", [query, limit, include_unavailable])
        rows = await cur.fetchall()
        # Ensure dataclass 'Item' is defined above.
        if not rows:
            return []
        # Expecting list of tuples for SETOF composite type Item
        try:
            return [Item(*r) for r in rows]
        except TypeError as e:
            # Tuple unpacking failed. This often happens if the DB connection
            # is configured with a dict-like row factory (e.g., DictRow).
            # This generated code expects the default tuple row factory.
            raise TypeError(
                f"Failed to map SETOF results to dataclass list for Item. "
                f"Check DB connection: Default tuple row_factory expected. Error: {e}"
            )
