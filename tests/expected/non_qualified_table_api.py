# -*- coding: utf-8 -*-
# Auto-generated by sql2pyapi from non_qualified_table.sql
#
# IMPORTANT: This code expects the database connection to use the default
# psycopg tuple row factory. It will raise errors if used with
# dictionary-based row factories (like DictRow).

from typing import List, Optional, Tuple, Dict, Any
from uuid import UUID
from datetime import date, datetime
from psycopg import AsyncConnection
from dataclasses import dataclass


@dataclass
class User:
    id: UUID
    clerk_id: str
    email: Optional[str]
    email_verified: Optional[bool]
    first_name: Optional[str]
    last_name: Optional[str]
    last_sign_in_at: Optional[datetime]
    created_at: datetime
    updated_at: datetime
    is_deleted: Optional[bool]


async def get_user_by_clerk_id(conn: AsyncConnection, clerk_id: str) -> List[User]:
    """Function returning a non-schema-qualified table"""
    async with conn.cursor() as cur:
        await cur.execute("SELECT * FROM get_user_by_clerk_id(%s)", [clerk_id])
        rows = await cur.fetchall()
        # Ensure dataclass 'User' is defined above.
        if not rows:
            return []
        # Expecting list of tuples for SETOF composite type User
        try:
            return [User(*r) for r in rows]
        except TypeError as e:
            # Tuple unpacking failed. This often happens if the DB connection
            # is configured with a dict-like row factory (e.g., DictRow).
            # This generated code expects the default tuple row factory.
            raise TypeError(
                f"Failed to map SETOF results to dataclass list for User. "
                f"Check DB connection: Default tuple row_factory expected. Error: {e}"
            )
